<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Federico Bruzzone&#39;s website</title>
    <link>https://federicobruzzone.github.io/</link>
    <description>Recent content on Federico Bruzzone&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Apr 2023 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://federicobruzzone.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Math Typesetting</title>
      <link>https://federicobruzzone.github.io/post/my-first-post/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://federicobruzzone.github.io/post/my-first-post/</guid>
      
        <description>&lt;h2 id=&#34;repeating-fractions&#34;&gt;Repeating fractions&lt;/h2&gt;
&lt;p&gt;$$
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }
$$&lt;/p&gt;
&lt;h2 id=&#34;summation-notation&#34;&gt;Summation notation&lt;/h2&gt;
&lt;p&gt;$$
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
$$&lt;/p&gt;
&lt;h2 id=&#34;sum-of-a-series&#34;&gt;Sum of a Series&lt;/h2&gt;
&lt;p&gt;I broke up the next two examples into separate lines so it behaves better on a mobile phone. That&amp;rsquo;s why they include \displaystyle.&lt;/p&gt;
&lt;p&gt;$$
\displaystyle\sum_{i=1}^{k+1}i
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \left(\sum_{i=1}^{k}i\right) +(k+1)
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \frac{k(k+1)}{2}+k+1
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \frac{k(k+1)+2(k+1)}{2}
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \frac{(k+1)(k+2)}{2}
$$&lt;/p&gt;
&lt;p&gt;$$
\displaystyle= \frac{(k+1)((k+1)+1)}{2}
$$&lt;/p&gt;
&lt;h2 id=&#34;product-notation&#34;&gt;Product notation&lt;/h2&gt;
&lt;p&gt;$$
\displaystyle 1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \displaystyle \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \displaystyle\text{ for }\lvert q\rvert &amp;lt; 1.
$$&lt;/p&gt;
&lt;h2 id=&#34;inline-math&#34;&gt;Inline math&lt;/h2&gt;
&lt;p&gt;And here is some in-line math: $$ k_{n+1} = n^2 + k_n^2 - k_{n-1} $$ , followed by some more text.&lt;/p&gt;
&lt;h2 id=&#34;greek-letters&#34;&gt;Greek Letters&lt;/h2&gt;
&lt;p&gt;$$
\Gamma\ \Delta\ \Theta\ \Lambda\ \Xi\ \Pi\ \Sigma\ \Upsilon\ \Phi\ \Psi\ \Omega
\alpha\ \beta\ \gamma\ \delta\ \epsilon\ \zeta\ \eta\ \theta\ \iota\ \kappa\ \lambda\ \mu\ \nu\ \xi \ \omicron\ \pi\ \rho\ \sigma\ \tau\ \upsilon\ \phi\ \chi\ \psi\ \omega\ \varepsilon\ \vartheta\ \varpi\ \varrho\ \varsigma\ \varphi
$$&lt;/p&gt;
&lt;h2 id=&#34;arrows&#34;&gt;Arrows&lt;/h2&gt;
&lt;p&gt;$$
\gets\ \to\ \leftarrow\ \rightarrow\ \uparrow\ \Uparrow\ \downarrow\ \Downarrow\ \updownarrow\ \Updownarrow
$$&lt;/p&gt;
&lt;p&gt;$$
\Leftarrow\ \Rightarrow\ \leftrightarrow\ \Leftrightarrow\ \mapsto\ \hookleftarrow
\leftharpoonup\ \leftharpoondown\ \rightleftharpoons\ \longleftarrow\ \Longleftarrow\ \longrightarrow
$$&lt;/p&gt;
&lt;p&gt;$$
\Longrightarrow\ \longleftrightarrow\ \Longleftrightarrow\ \longmapsto\ \hookrightarrow\ \rightharpoonup
$$&lt;/p&gt;
&lt;p&gt;$$
\rightharpoondown\ \leadsto\ \nearrow\ \searrow\ \swarrow\ \nwarrow
$$&lt;/p&gt;
&lt;h2 id=&#34;symbols&#34;&gt;Symbols&lt;/h2&gt;
&lt;p&gt;$$
\surd\ \barwedge\ \veebar\ \odot\ \oplus\ \otimes\ \oslash\ \circledcirc\ \boxdot\ \bigtriangleup
$$&lt;/p&gt;
&lt;p&gt;$$
\bigtriangledown\ \dagger\ \diamond\ \star\ \triangleleft\ \triangleright\ \angle\ \infty\ \prime\ \triangle
$$&lt;/p&gt;
&lt;h2 id=&#34;calculus&#34;&gt;Calculus&lt;/h2&gt;
&lt;p&gt;$$
\int u \frac{dv}{dx},dx=uv-\int \frac{du}{dx}v,dx
$$&lt;/p&gt;
&lt;p&gt;$$
f(x) = \int_{-\infty}^\infty \hat f(\xi),e^{2 \pi i \xi x}
$$&lt;/p&gt;
&lt;p&gt;$$
\oint \vec{F} \cdot d\vec{s}=0
$$&lt;/p&gt;
&lt;h2 id=&#34;lorenz-equations&#34;&gt;Lorenz Equations&lt;/h2&gt;
&lt;p&gt;$$
\begin{aligned} \dot{x} &amp;amp; = \sigma(y-x) \ \dot{y} &amp;amp; = \rho x - y - xz \ \dot{z} &amp;amp; = -\beta z + xy \end{aligned}
$$&lt;/p&gt;
&lt;h2 id=&#34;cross-product&#34;&gt;Cross Product&lt;/h2&gt;
&lt;p&gt;This works in KaTeX, but the separation of fractions in this environment is not so good.&lt;/p&gt;
&lt;p&gt;$$
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp;amp; \frac{\partial Y}{\partial u} &amp;amp; 0 \ \frac{\partial X}{\partial v} &amp;amp; \frac{\partial Y}{\partial v} &amp;amp; 0 \end{vmatrix}
$$&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a workaround: make the fractions smaller with an extra class that targets the spans with &amp;ldquo;mfrac&amp;rdquo; class (makes no difference in the MathJax case):&lt;/p&gt;
&lt;p&gt;$$
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp;amp; \frac{\partial Y}{\partial u} &amp;amp; 0 \ \frac{\partial X}{\partial v} &amp;amp; \frac{\partial Y}{\partial v} &amp;amp; 0 \end{vmatrix}
$$&lt;/p&gt;
&lt;h2 id=&#34;accents&#34;&gt;Accents&lt;/h2&gt;
&lt;p&gt;$$
\hat{x}\ \vec{x}\ \ddot{x}
$$&lt;/p&gt;
&lt;h2 id=&#34;stretchy-brackets&#34;&gt;Stretchy brackets&lt;/h2&gt;
&lt;p&gt;$$
\left(\frac{x^2}{y^3}\right)
$$&lt;/p&gt;
&lt;h2 id=&#34;evaluation-at-limits&#34;&gt;Evaluation at limits&lt;/h2&gt;
&lt;p&gt;$$
\left.\frac{x^3}{3}\right|_0^1
$$&lt;/p&gt;
&lt;h2 id=&#34;case-definitions&#34;&gt;Case definitions&lt;/h2&gt;
&lt;p&gt;$$
f(n) = \begin{cases} \frac{n}{2}, &amp;amp; \text{if } n\text{ is even} \ 3n+1, &amp;amp; \text{if } n\text{ is odd} \end{cases}
$$&lt;/p&gt;
&lt;h2 id=&#34;maxwells-equations&#34;&gt;Maxwell&amp;rsquo;s Equations&lt;/h2&gt;
&lt;p&gt;$$
\begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \ \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \ \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; = \vec{\mathbf{0}} \ \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned}
$$&lt;/p&gt;
&lt;p&gt;These equations are quite cramped. We can add vertical spacing using (for example) [1em] after each line break (\). as you can see here:&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \[1em] \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \[0.5em] \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; = \vec{\mathbf{0}} \[1em] \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned}
$$&lt;/p&gt;
&lt;h2 id=&#34;statistics&#34;&gt;Statistics&lt;/h2&gt;
&lt;p&gt;Definition of combination:&lt;/p&gt;
&lt;p&gt;$$
\frac{n!}{k!(n-k)!} = {^n}C_k
{n \choose k}
$$&lt;/p&gt;
&lt;h2 id=&#34;fractions-on-fractions&#34;&gt;Fractions on fractions&lt;/h2&gt;
&lt;p&gt;$$
\frac{\frac{1}{x}+\frac{1}{y}}{y-z}
$$&lt;/p&gt;
&lt;h2 id=&#34;n-th-root&#34;&gt;n-th root&lt;/h2&gt;
&lt;p&gt;$$
\sqrt[n]{1+x+x^2+x^3+\ldots}
$$&lt;/p&gt;
&lt;h2 id=&#34;matrices&#34;&gt;Matrices&lt;/h2&gt;
&lt;p&gt;$$
\begin{pmatrix} a_{11} &amp;amp; a_{12} &amp;amp; a_{13}\ a_{21} &amp;amp; a_{22} &amp;amp; a_{23}\ a_{31} &amp;amp; a_{32} &amp;amp; a_{33} \end{pmatrix}
\begin{bmatrix} 0 &amp;amp; \cdots &amp;amp; 0 \ \vdots &amp;amp; \ddots &amp;amp; \vdots \ 0 &amp;amp; \cdots &amp;amp; 0 \end{bmatrix}
$$&lt;/p&gt;
&lt;h2 id=&#34;punctuation&#34;&gt;Punctuation&lt;/h2&gt;
&lt;p&gt;$$
f(x) = \sqrt{1+x} \quad (x \ge -1)
f(x) \sim x^2 \quad (x\to\infty)
$$&lt;/p&gt;
&lt;p&gt;Now with punctuation:&lt;/p&gt;
&lt;p&gt;$$
f(x) = \sqrt{1+x}, \quad x \ge -1
f(x) \sim x^2, \quad x\to\infty
$$&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://federicobruzzone.github.io/about/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://federicobruzzone.github.io/about/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;About&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>External Link</title>
      <link>https://federicobruzzone.github.io/external-link/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://federicobruzzone.github.io/external-link/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;External link&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>Factory Method pattern - Class Creational</title>
      <link>https://federicobruzzone.github.io/post/design-patterns/factory-method-pattern-class-creational/readme/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://federicobruzzone.github.io/post/design-patterns/factory-method-pattern-class-creational/readme/</guid>
      
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Factory%20Method%20pattern%20-%20Class%20Creational/img/cover.png&#34; alt=&#34;Cover&#34;&gt;&lt;/p&gt;
&lt;p&gt;By &lt;strong&gt;Dmitry Zhart&lt;/strong&gt; (&lt;a href=&#34;https://refactoring.guru/&#34;&gt;refactoring.guru&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;intent&#34;&gt;Intent&lt;/h2&gt;
&lt;p&gt;Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.&lt;/p&gt;
&lt;h2 id=&#34;also-known-as&#34;&gt;Also Known As&lt;/h2&gt;
&lt;p&gt;Virtual Constructor&lt;/p&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Factory%20Method%20pattern%20-%20Class%20Creational/img/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Framework use abstract classes to define and maintain relationship between objects. A framework is often responsible for creating these objects as well. &lt;/p&gt;
&lt;p&gt;Consider a framework for applications that can present multiple documents to the user. Two key abstractions in this framework are the classes Application and the Document. Both classes are abstract, and clients have to subclass them to realize their application-specific implementations. The Application class is responsible for managing Documents and will create them as required.&lt;/p&gt;
&lt;p&gt;Because the particular Document subclass to instantiate is application-specific, the Application class can&amp;rsquo;t predict the subclass of Document to instantiate - the Application class only knows &lt;em&gt;when&lt;/em&gt; a new document should be created, not &lt;em&gt;what kind&lt;/em&gt; of Document to create.&lt;/p&gt;
&lt;p&gt;The Factory Method pattern offers a solution. It encapsulates the knowledge of which Document subclass to create and moves this knowledge out of the framework.&lt;/p&gt;
&lt;p&gt;Application subclass redefine an abstract CreateDocument operation on Application to return the appropriate Document subclass. Once an Application subclass is instantiated, it can then instantiate application-specific Documents without knowing their class. We call CreateDocument a &lt;strong&gt;factory method&lt;/strong&gt; because it is responsible for &amp;ldquo;manufacturing&amp;rdquo; an object.&lt;/p&gt;
&lt;h2 id=&#34;applicability&#34;&gt;Applicability&lt;/h2&gt;
&lt;p&gt;Use the Factory Method pattern when&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a class can&amp;rsquo;t anticipate the class of obejcts it must create.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a class wants its subclasses to specify the objects it creates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;classes delegate responsibility to one of several helper subclasses, and you want to localize the knowledge of which helper subclass is the delegate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Factory%20Method%20pattern%20-%20Class%20Creational/img/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;participants&#34;&gt;Participants&lt;/h2&gt;
&lt;h3 id=&#34;product&#34;&gt;Product&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(Document)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;defines the interface of objects the factory method creates.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concreteproduct&#34;&gt;ConcreteProduct&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(MyDocument)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implements the Product interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;creator&#34;&gt;Creator&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(Application)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;declares the factory method, which returns an object of type Product. Creator may also define a default implementation of the factory method that returns a default ConcreteProduct object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;may call the factory method to create a Product object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concretecreator&#34;&gt;ConcreteCreator&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(MyApplication&lt;/em&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;overrides the factory method to return an instance of a ConcreteProduct.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;collaborations&#34;&gt;Collaborations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Creator relies on its subclasses to define the factory method so that it returns an instance of the appropriate ConcreteProduct.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consequences&#34;&gt;Consequences&lt;/h2&gt;
&lt;p&gt;Factory methods eliminate the need to bind application-specific classes into your code. The code only deals with the Product interface; therefore it can wok with any user-defined ConcreteProduct classes.&lt;/p&gt;
&lt;p&gt;A potential disadvantage of factory methods is that clients might have to subclass a Creator classes just to create a particular ConcreteProduct object.&lt;/p&gt;
&lt;p&gt;Here are two additional consequences of the Factory Method pattern:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Provides hooks for subclasses&lt;/em&gt;. Creating objects inside a class with a factory method is always more flexible than crating an object directly. Factory method gives subclasses a hook for providing an extend version of an object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Connects parallel class hierarchies&lt;/em&gt;. Parallel class hierarchies result when a class delegates some of its responsibilities to a separate class. Consider graphical figures that can be manipulated interactively; that is, thay can be stretched, moved, or rotated using the mouse. Implementing suh interactions ins&amp;rsquo;t always easy. It often requires storing and updating information records the state of the manipulation. This state is needed only during manipulation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With this constraints, it&amp;rsquo;s better to use separate Manipulator object that implements the interaction and keeps track of any manipulation-specific state that&amp;rsquo;s needed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Factory%20Method%20pattern%20-%20Class%20Creational/img/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Figure class provides a CreateManipulator factory method that lets client create a Figure&amp;rsquo;s corresponding Manipulator. Figure subclasses override this method to return an instance of the Manipulator subclass that&amp;rsquo;s right for them. Alternatively, the Figure class may implement CreateManipulator to return a default Manipulator instance, and Figure subclasses may simply inherit default. &lt;/p&gt;
&lt;p&gt;Notice how the factory method defines the connection between the two class hierarchies. It localize knowledge of which classes belong together.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;The two varieties&lt;/em&gt;. The two main variations of the Factory Method pattern are (1) the case when the Creator class is an abstract class and does not provide an implementation for the factory method it declares, and (2) the case when the Creator is a concrete class and provide a default implementation for the factory method. The first case &lt;em&gt;requires&lt;/em&gt; subclasses to define an implementation, because there is no reasonable default. In the second case, the concrete Creator uses the factory method primarily for flexibility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Parameterized factory methods&lt;/em&gt;. Another variation on the pattern lets the factory method create &lt;em&gt;multiple&lt;/em&gt; kinds of products. The factory method takes a parameter that identifies the kind of object to create. All objects the factory method creates will share the Product interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Language-specific variants and issues&lt;/em&gt;. Different languages lend themselves to other interesting variations and caveats. Smalltalk programs often use a method that returns the class of the object to be instantiated. A Creator factory method can use this value to create a product, and a ConcreteCreator may store or even compute this value. The result is an even later binding for the type of ConcreteProduct to be instantiated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Using templates to avoid subclassing&lt;/em&gt;. Another potential problem with factory methods is that they might force you to subclass just to create the appropriate Product objects. Another way to get around this in C++ is to provide a template subclass of Creator that&amp;rsquo;s parameterized by the Product class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Naming conventions&lt;/em&gt;. It&amp;rsquo;s good practice to use naming conventions that make it clear you&amp;rsquo;re using factory methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sample-code&#34;&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;To better understand the following code and the classes used look&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/FedericoBruzzone/federicobruzzone.github.io/blob/main/static/design-pattern/commoncode&#34;&gt;here🔗!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;a href=&#34;https://github.com/FedericoBruzzone/federicobruzzone.github.io/blob/main/static/design-pattern/commoncode/MazeGame_First.java&#34;&gt;&lt;em&gt;CreateMaze&lt;/em&gt;&lt;/a&gt; builds and returns a maze. One problem with this function is that it hard-codes the classes of maze, rooms, doors, and walls.We&amp;rsquo;ll introduce factory methods to let subclasses choose these components.&lt;/p&gt;
&lt;p&gt;First we&amp;rsquo;ll define factory methods in &lt;em&gt;MazeGame&lt;/em&gt; for creating the maze, room, wall, and door objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;import&lt;/span&gt; commoncode.*&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;MazeGame_Factory&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MazeGame_Factory&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{}&lt;/span&gt;
  
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Maze &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Maze&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Wall &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Wall&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Room &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Room&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Door &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeDoor&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Room r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; Room r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Door&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Maze &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;CreateMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    Maze aMaze   &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
    Room r1      &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    Room r2      &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    Door theDoor &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeDoor&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;

    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;North&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;East&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  theDoor&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;South&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;West&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;

    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;North&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;East&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;South&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;West&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  theDoor&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;

    aMaze&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;AddRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    aMaze&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;AddRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; aMaze&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Each factory method returns a maze component of a given type. &lt;em&gt;MazeGame&lt;/em&gt; provides default implementations that return the simplest kinds of maze, rooms, walls, and doors. &lt;/p&gt;
&lt;p&gt;Now we have to rewrite &lt;em&gt;CreateMaze&lt;/em&gt; to use these factory methods.&lt;/p&gt;
&lt;h2 id=&#34;known-uses&#34;&gt;Known Uses&lt;/h2&gt;
&lt;p&gt;Factory methods pervade toolkits and frameworks.The preceding document example is a typical use in MacApp and ET++ [WGM88]. The manipulator example is from Unidraw.&lt;/p&gt;
&lt;p&gt;Class View in the Smalltalk-80 Model/View/Controller framework has a method defaultController that creates a controller, and this might appear to be a factory method [Par90]. But subclasses of Viewspecify the class of their default controller by defining defaultControllerClass, which returns the class from which defaultController creates instances. So defaultControllerClass is the real factory method, tKat is, the method that subclasses should override.&lt;/p&gt;
&lt;h2 id=&#34;related-patterns&#34;&gt;Related Patterns&lt;/h2&gt;
&lt;p&gt;Abstract Factory is often implemented with factory methods. &lt;/p&gt;
&lt;p&gt;Factory methods are usually called within Template Methods. &lt;/p&gt;
&lt;p&gt;Prototypes don&amp;rsquo;t require subclassing Creator. However, they often require an Initialize operation on the Product class. Creator uses Initialize to initialize the object. Factory Method doesn&amp;rsquo;t require such an operation.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Builder pattern pattern - Object Creational</title>
      <link>https://federicobruzzone.github.io/post/design-patterns/builder-pattern-object-creational/readme/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://federicobruzzone.github.io/post/design-patterns/builder-pattern-object-creational/readme/</guid>
      
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Builder%20pattern%20-%20Object%20Creational/img/cover.png&#34; alt=&#34;Cover&#34;&gt;&lt;/p&gt;
&lt;p&gt;By &lt;strong&gt;Dmitry Zhart&lt;/strong&gt; (&lt;a href=&#34;https://refactoring.guru/&#34;&gt;refactoring.guru&lt;/a&gt;)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;intent&#34;&gt;Intent&lt;/h2&gt;
&lt;p&gt;Separate the construction of a complex object from its representation so that the same construction process can create different representation.&lt;/p&gt;
&lt;h2 id=&#34;also-knownas&#34;&gt;Also Known As&lt;/h2&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Builder%20pattern%20-%20Object%20Creational/img/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;A reader for the RTF (Rich Text Format) document exchange format should be able to convert RTF to many text formats. The problem is the number of possible conversions is open-ended.&lt;/p&gt;
&lt;p&gt;A solution is to configure the RTFReader class with TextConverter object that converts RTF to another textual representation. As the RTFReader perses the RTF document, it uses the TextConverter to perform the conversion. Whenever the RTFReader recognizes an RTF token, it issues a request to the TextConverter to convert the token.&lt;/p&gt;
&lt;p&gt;Subclasses of TextConverter specialize in different conversions and formats. For example, ASCIIConverter ignores requests to convert anything except plain text.&lt;/p&gt;
&lt;p&gt;Each kind of converter class takes the mechanism for creating and assembling a complex object and puts it behind an abstract interface. The converter is separate from the reader.&lt;/p&gt;
&lt;p&gt;The Builder pattern captures all these relationships. Each converter is called a &lt;strong&gt;builder&lt;/strong&gt; in the pattern, and the reader is called the &lt;strong&gt;director&lt;/strong&gt;. The Builder pattern separates the algorithm for interpreting a textual format from how a converted format gets created and represented.&lt;/p&gt;
&lt;h2 id=&#34;applicability&#34;&gt;Applicability&lt;/h2&gt;
&lt;p&gt;Use the Builder pattern when&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the algorithm for creating a complex object should be independent of the parts that make up the object and how they are assembled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the construction process must allow different representations for the object that is constructed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Builder%20pattern%20-%20Object%20Creational/img/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;participants&#34;&gt;Participants&lt;/h2&gt;
&lt;h3 id=&#34;builder&#34;&gt;Builder&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(TextConverter)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;specifies an abstract interface for creating parts of a Product object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concretebuilder&#34;&gt;ConcreteBuilder&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(ASCIIConverter, TeXConverter, TextWidgetConverter)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;constructs and assembles parts of the product by implementing the Builder interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;defines and keeps track of the representation it creates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provides an interface for retrieving the product.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;director&#34;&gt;Director&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(RTFReader)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructs an object using the Builder interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;product&#34;&gt;Product&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(ASCIIText, TeXText, TextWidget)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;represents the complex object under construction. ConcreteBuilder builds the product&amp;rsquo;s internal representation and defines the process by which it is assembled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;includes classes that define the constituent parts, including interface for assembling the parts into the final result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;collaborations&#34;&gt;Collaborations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The client creates the Director object and configures it with the desired Builder object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Director norifies the builder whenever a part of the product should be built.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Builder handles requests from the director and adds parts to the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client retrieves the product from the builder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Builder%20pattern%20-%20Object%20Creational/img/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;consequences&#34;&gt;Consequences&lt;/h2&gt;
&lt;p&gt;Here are key consequences of the Builder pattern:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;It lets you vary a product&amp;rsquo;s internal representation.&lt;/em&gt; The Builder object provides the director with an abstract interface for constructing the product. The interface lets the builder hide the representation and internal structure of the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;It isolates code for construction and representation.&lt;/em&gt; The Builder pattern improves modularity by encapsulating the way a complex object is constructed and represented. Clients needn&amp;rsquo;t know anything about the classes that define the product&amp;rsquo;s internal structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;It gives you finer control over the construction process.&lt;/em&gt; Unlike creational patterns that constructed products in one shot, the Builder pattern constructs the product step by step under the director&amp;rsquo;s control.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Typically there is an abstract Builder class that defines an operation for each component that a directory may ask it to create.&lt;/p&gt;
&lt;p&gt;Here are other implementation issues to consider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Assemply and construction interface.&lt;/em&gt; Builders construct their products in step-by-step fashion. A key design issue concerns the model for the construction and assembly process. A model where the results of construction requests are simply appended to the product is usually sufficient. But sometimes you might need access to part of the product constructed earlier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Why no abstract class for products?&lt;/em&gt; In common case, the product produced by the concrete builders differ so greatly in their representation that there is little to gain form giving different products a common parent class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Empty methods as default in Builder.&lt;/em&gt; They are defined as empty methods instead, letting clients override only the operation they are interested in.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;sample-code&#34;&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;To better understand the following code and the classes used look&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/FedericoBruzzone/federicobruzzone.github.io/tree/main/static/design-pattern/commoncode&#34;&gt;here🔗!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will define a variant of the &lt;a href=&#34;https://github.com/FedericoBruzzone/federicobruzzone.github.io/tree/main/static/design-pattern/commoncode&#34;&gt;&lt;em&gt;CreateMaze&lt;/em&gt;&lt;/a&gt; member function that takes a builder of class &lt;em&gt;MazeBuilder&lt;/em&gt; as an argument.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;MazeBuilder&lt;/em&gt; class defines the following interface for building mazes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;MazeBuilder&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MazeBuilder&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{}&lt;/span&gt;
    
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;BuildMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{}&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;BuildRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; room&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{}&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;BuildDoor&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; roomFrom&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; roomTo&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{}&lt;/span&gt;
 
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Maze &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;GetMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This interface can create three thing: (1) the maze, (2) rooms with a particular room number and (3) doors between numbered rooms. The &lt;em&gt;GetMaze&lt;/em&gt; operation returns the maze to the client. &lt;/p&gt;
&lt;p&gt;All the maze-building operations of &lt;em&gt;MazeBuilder&lt;/em&gt; do nothing by default.&lt;/p&gt;
&lt;p&gt;Given the &lt;em&gt;MazeBuilder&lt;/em&gt; interface, we can change the &lt;em&gt;CreateMaze&lt;/em&gt; member function to take this builder as a parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;MazeGame_Builder&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Maze &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;CreateMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;MazeBuilder builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;BuildMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
    
    builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;BuildRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;BuildRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;BuildDoor&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; 2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;GetMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Compare this version of &lt;em&gt;CreateMaze&lt;/em&gt; with the &lt;a href=&#34;https://github.com/FedericoBruzzone/federicobruzzone.github.io/blob/main/static/design-pattern/commoncode/MazeGame_First.java&#34;&gt;original&lt;/a&gt;. Notice how the builder hides the internal representation of the Maze. This make it easier to change the way a maze is represented, since none of the clients of &lt;em&gt;MazeBuilder&lt;/em&gt; has to be changed.&lt;/p&gt;
&lt;p&gt;Like the other creational patterns, the Builder pattern encapsulates how objects get created. That means we can reuse &lt;em&gt;MazeBuilder&lt;/em&gt; to build different kind of mazes.&lt;/p&gt;
&lt;p&gt;Note that &lt;em&gt;MazeBuilder&lt;/em&gt; does not create mazes itself; it main purpose is just to define an interface for creating mazes. It defines empty implementations primarily for convenience. Subclasses of &lt;em&gt;MazeBuilder&lt;/em&gt; so the actual work.&lt;/p&gt;
&lt;p&gt;The subclass &lt;em&gt;StandardMazeBuilder&lt;/em&gt; is an implementation that builds simple mazes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;StandardMazeBuilder&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;extends&lt;/span&gt; MazeBuilder &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;private&lt;/span&gt; Maze _currentMaze&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;StandardMazeBuilder&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;_currentMaze&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;BuildMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;_currentMaze&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Maze&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;BuildRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;_currentMaze&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;RoomNo&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
      Room room &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Room&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;_currentMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;AddRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;room&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;

      room&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;North&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Wall&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
      room&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;South&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Wall&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
      room&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;East&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Wall&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
      room&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;West&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Wall&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;BuildDoor&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; n1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; n2&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    Room r1 &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;_currentMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;RoomNo&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;n1&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    Room r2 &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;_currentMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;RoomNo&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;n2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    Door d &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Door&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;

    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;CommonWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;),&lt;/span&gt; d&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;CommonWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;),&lt;/span&gt; d&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;private&lt;/span&gt; Direction &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;CommonWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Room r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; Room r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Maze &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;GetMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;_currentMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;CommonWall&lt;/em&gt; is a utility operation that determines the direction of the common wall between two rooms.&lt;/p&gt;
&lt;p&gt;Clients can now use &lt;em&gt;CreateMaze&lt;/em&gt; in conjunction with &lt;em&gt;StandardMazeBuilder&lt;/em&gt; to create a maze:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;ClientBuilder&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#2c5dcd&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    Maze maze&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
    MazeGame_Builder game &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; MazeGame_Builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
    StandardMazeBuilder builder &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; StandardMazeBuilder&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;

    game&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;CreateMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    maze &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; builder&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;GetMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We could have put all the &lt;em&gt;StandardMazeBuilder&lt;/em&gt; operations in &lt;em&gt;Maze&lt;/em&gt; and let each &lt;em&gt;Maze&lt;/em&gt; build itself. But making &lt;em&gt;Maze&lt;/em&gt; smaller makes it easier to understand and modify, and &lt;em&gt;StandardMazeBuilder&lt;/em&gt; is easy to separate from &lt;em&gt;Maze&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;known-uses&#34;&gt;Known Uses&lt;/h2&gt;
&lt;p&gt;The RTF converter application is from ET++ [WGM88]. Its text building block uses a builder to process text sorted in the RTF format.&lt;/p&gt;
&lt;p&gt;Builder is a common pattern in Smalltalk-80 [Par90]:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Parser class in the compiler subsystem is a Director that takes a ProgramNodeBuilder object as an argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClassBuilder is a builder that Classes use to create subclasses for themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ByteCodeStream is a builder that creates a compiled method as a byte array.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Service Configurator framework from the Adaptive Communications Environment uses a builder to construct network service components that are linked into a server at run-time [SS94].&lt;/p&gt;
&lt;h2 id=&#34;related-patterns&#34;&gt;Related Patterns&lt;/h2&gt;
&lt;p&gt;Abstract Factory is similar to Builder in that it too may construct complex object. The primary difference is that the Builder pattern focuses on constructing a complex object step by step. Abstract Factory&amp;rsquo;s emphasis is on families of product objects. Builder returns the product as a final step, but as far as Abstract Factory pattern is concerned, the product gets returned immediately.&lt;/p&gt;
&lt;p&gt;A Composite is what the builder often builds.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Abstract Factory pattern - Object Creational</title>
      <link>https://federicobruzzone.github.io/post/design-patterns/abstract-factory-pattern-object-creational/readme/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://federicobruzzone.github.io/post/design-patterns/abstract-factory-pattern-object-creational/readme/</guid>
      
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Abstract%20Factory%20pattern%20-%20Object%20Creational/img/cover.png&#34; alt=&#34;Cover&#34;&gt;&lt;/p&gt;
&lt;p&gt;By &lt;strong&gt;Dmitry Zhart&lt;/strong&gt; (&lt;a href=&#34;https://refactoring.guru/&#34;&gt;refactoring.guru&lt;/a&gt;)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;intent&#34;&gt;Intent&lt;/h2&gt;
&lt;p&gt;Provide an interface for creating families of related or dependent objects without specifying their concrete class.&lt;/p&gt;
&lt;h2 id=&#34;also-knownas&#34;&gt;Also Known As&lt;/h2&gt;
&lt;p&gt;Kit&lt;/p&gt;
&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Abstract%20Factory%20pattern%20-%20Object%20Creational/img/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Consider a user interface toolkit that supports multiple look-and-feel standards. Different look-and-feel define different appearances and behaviors for user interface &amp;ldquo;widgets&amp;rdquo; like scroll vars, windows, and buttons. Instantiating look-and-feel-specific classes of widgets throughout the application makes it hard to change the look and feel later.&lt;/p&gt;
&lt;p&gt;We can solve this problem by defining an abstract WidgetFactory class that declares an interface for creating each basic kind of widget. There is also an abstract class for each kind of widget, and concrete subclasses implement widgets for specific look-and-feel standards. WidgetFactory&amp;rsquo;s interface has an operation that returns a new widget object for each abstract widget class. Clients call these operations to obtain widget instances.&lt;/p&gt;
&lt;p&gt;There is a concrete subclass of WidgetFactory for each look-and-feel standard. Client create widgets solely through the WidgetFactory interface and have no knowledge of the classes that implement widget for a particular look and feel.&lt;/p&gt;
&lt;p&gt;A WidgetFactory also enforces dependencies between the concrete widget classes. A &lt;strong&gt;Dummy&lt;/strong&gt; scroll bar should be used with a &lt;strong&gt;Dummy&lt;/strong&gt; button and a &lt;strong&gt;Dummy&lt;/strong&gt; text editor, and that constraint is enforced automatically as a consequence of using a &lt;strong&gt;DummyWidgetFactory&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;applicability&#34;&gt;Applicability&lt;/h2&gt;
&lt;p&gt;Use the Abstract Factory pattern when&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a system should be independent of how its product are created, composed, and represented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a system should be configured with one of multiple families of products.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a family of related product objects is designed to be used together, and you need to enforce this constraint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you want to provide a class library of products, and you want to reveal just their interfaces, not their implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Abstract%20Factory%20pattern%20-%20Object%20Creational/img/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;participants&#34;&gt;Participants&lt;/h2&gt;
&lt;h3 id=&#34;abstractfactory&#34;&gt;AbstractFactory&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(WidgetFactory)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;declares an interface for operations that create abstract product objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concretefactory&#34;&gt;ConcreteFactory&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(DummyWidgetFactory, TWidgetFactory)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implements the operations to create concrete product objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abstractproduct&#34;&gt;AbstractProduct&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(Window, ScrollBar)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;declares an interface for a type of product object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concreteproduct&#34;&gt;ConcreteProduct&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(DummyWindow, DummyScrollBar)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;defines a product object to be created by the corresponding concrete factory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implements the AbstractProduct interface.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;uses only interfaces declared by AbstractFactory and AbstractProduct classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;collaborations&#34;&gt;Collaborations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Normally a single instance of a ConcreteFactory class is created at run-time. This concrete factory creates product objects having a particular implementation. To create different product objects, clients should use a different concrete factory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AbstractFactory defers creation of product objects to its ConcreteFactory subclass.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consequences&#34;&gt;Consequences&lt;/h2&gt;
&lt;p&gt;The Abstract Factory pattern has the following benefits and liabilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;It isolates concrete classes.&lt;/em&gt; The abstract Factory pattern help you control the classes of object than an application creates. Clients manipulate instances through their abstract interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;It makes exchanging product families easy.&lt;/em&gt; The class of concrete factory appears only once in an application - that is, where it&amp;rsquo;s instantiated. This makes it easy to change the concrete factory an application uses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;It promotes consistency among products.&lt;/em&gt; When product objects in a family are designed to work together, it is important that an application use objects from only one family at a time. AbstractFactory makes this easy to enforce.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Supporting new kind of products is difficult.&lt;/em&gt; Extending abstract factories to produce new kinds of Products is not easy. Supporting new kinds of products requires extending the factory interface, which involves changing the AbstractFactory class and all of its subclasses. (Solution in the next section)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Here are some useful techniques for implementing the Abstract Factory pattern.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Factories as singletons.&lt;/em&gt; An application typically needs only one instance of a ConcreteFactory per product family.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Creating the products.&lt;/em&gt; AbstractFactory only declares an &lt;em&gt;interface&lt;/em&gt; for creating products. It&amp;rsquo;s up to ConcreteProduct subclasses to actually create them. The most common way to do this is to define a factory method for each product. A concrete factory will specify  its products by overriding the factory method for each. While this implementation is simple, it requires a new concrete factory subclass for each product even if the product families differ only slightly. In many product families are possible, the concrete factory can be implemented using Prototype pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Defining extensible factories.&lt;/em&gt; AbstractFactory usually defines a different operation for each kind of product it can produce. Adding a new kind of product requires changing the AbstractFactory interface and all the classes that depends on it. A more flexible but less safe design is to add a parameter to operations that create objects. This parameter specifies the kind of object to be created.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An inherent problem remains: All products are returned to the client with the same abstract interface as given by the return type. The client will not be able to differentiate of make safe assumption about the class of a product. The client could perform a downcast, that is not always feasible of safe, because the downcasting can fail.&lt;/p&gt;
&lt;h2 id=&#34;sample-code&#34;&gt;Sample Code&lt;/h2&gt;
&lt;p&gt;We will apply the Abstract Factory pattern to creating the mazes.&lt;/p&gt;
&lt;p&gt;To better understand the following code and the classes used look&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/FedericoBruzzone/federicobruzzone.github.io/tree/main/static/design-pattern/commoncode&#34;&gt;here🔗!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Class &lt;em&gt;MazeFactory&lt;/em&gt; can create components of mazes. It build rooms, walls, and doors between rooms. For instance, it might be used by a program that builds mazes randomly. Programs that build mazes take a &lt;em&gt;MazeFactory&lt;/em&gt; as an argument so that the programmer can specify the classes of rooms, walls, and doors to construct.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;MazeFactory&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MazeFactory&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{}&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Maze &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Maze&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Wall &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Wall&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Room &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Room&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Door &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeDoor&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Room r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; Room r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; Door&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Here is a version of &lt;em&gt;CreateMaze&lt;/em&gt; that take &lt;em&gt;MazeFactory&lt;/em&gt; as a parameter. &lt;em&gt;CreateMaze&lt;/em&gt; builds a small maze consisting of two rooms with a door between them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;MazeGame_Factory&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Maze &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;CreateMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;MazeFactory factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    Maze aMaze   &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
    Room r1      &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    Room r2      &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    Door theDoor &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeDoor&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;

    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;North&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;East&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  theDoor&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;South&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;West&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;

    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;North&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;East&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;South&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt; factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;());&lt;/span&gt;
    r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;SetSide&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;Direction&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;West&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;,&lt;/span&gt;  theDoor&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;

    aMaze&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;AddRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r1&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
    aMaze&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;AddRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;r2&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; aMaze&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;     
  
&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now suppose we want to make a maze game in which a room can have a bomb set in it, and if the bomb goes off, it will damage the walls.&lt;/p&gt;
&lt;p&gt;We can make a subclass of &lt;em&gt;Room&lt;/em&gt; (&lt;a href=&#34;https://github.com/FedericoBruzzone/federicobruzzone.github.io/tree/main/static/design-pattern/commoncode&#34;&gt;here 🔗&lt;/a&gt;) keep track if a room has a bomb in it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;RoomWithABomb&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;extends&lt;/span&gt; Room &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; bombDamage&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;RoomWithABomb&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; roomNo&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;roomNo&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;  

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;setBombDamage&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; bombDamage&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;bombDamage&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; bombDamage&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt; 

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We also need a subclass of &lt;em&gt;Wall&lt;/em&gt; to keep track of the damage.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;BombedWall&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;extends&lt;/span&gt; Wall &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; wallDamage &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
  
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;BombedWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;  

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;hitWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; bombDamage&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;wallDamage&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; bombDamage&lt;span style=&#34;color:#2c5dcd&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The last class we defined is &lt;em&gt;BombedMazefactory&lt;/em&gt;, a subclass of &lt;em&gt;MazeFactory&lt;/em&gt; (defined above). This class only need to override two functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;
&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;BombedMazeFactory&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;extends&lt;/span&gt; MazeFactory &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
     
  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Wall &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeWall&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;()&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; BombedWall&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; Room &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;MakeRoom&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; 
    &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; RoomWithABomb&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;To build a simple maze that can contains bomb or not, we simply call &lt;em&gt;CreateMaze&lt;/em&gt; with a &lt;em&gt;BombedMazeFactory&lt;/em&gt; or &lt;em&gt;MazeFactory&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;text-decoration:underline&#34;&gt;MainAbstractFactory&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#5918bb;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff8000;font-weight:bold&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#2c5dcd&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#2c5dcd&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd&#34;&gt;{&lt;/span&gt;
    MazeGame_Factory game &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; MazeGame_Factory&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;

    MazeFactory factory &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; MazeFactory&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;
    BombedMazeFactory bombedFactory &lt;span style=&#34;color:#2c5dcd&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2c5dcd;font-weight:bold&#34;&gt;new&lt;/span&gt; BombedMazeFactory&lt;span style=&#34;color:#2c5dcd&#34;&gt;();&lt;/span&gt;

    game&lt;span style=&#34;color:#2c5dcd&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd;font-style:italic&#34;&gt;CreateMaze&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;(&lt;/span&gt;bombedFactory &lt;span style=&#34;color:#0080ff;font-style:italic&#34;&gt;/* factory */&lt;/span&gt;&lt;span style=&#34;color:#2c5dcd&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;  
  
&lt;span style=&#34;color:#2c5dcd&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Notice that the &lt;em&gt;MazeFactory&lt;/em&gt; is just a collection of factory methods. This is the most common way to implement the Abstract Factory pattern. Also note that MazeFactory is not an abstract class; it acts as both AbstractFactory &lt;em&gt;and&lt;/em&gt; ConcreteFactory.&lt;/p&gt;
&lt;h2 id=&#34;known-uses&#34;&gt;Known Uses&lt;/h2&gt;
&lt;p&gt;InterViews uses the &amp;ldquo;Kit&amp;rdquo; suffix [Lin92] to denote AbstractFactory classes. It defines WidgetKit and DialogKit abstract factories for generating look-and-feel-specific user interface objects. InterViews also includes a LayoutKit that generates different composition objects depending on the layout desired.&lt;/p&gt;
&lt;h2 id=&#34;related-patterns&#34;&gt;Related Patterns&lt;/h2&gt;
&lt;p&gt;AbstractFactory classes are often implemented with factory methods, but they can also implemented using Prototype.&lt;/p&gt;
&lt;p&gt;A concrete factory is often a singleton.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Design Patterns - Introduction</title>
      <link>https://federicobruzzone.github.io/post/design-patterns/design-patterns-introduction/readme/</link>
      <pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://federicobruzzone.github.io/post/design-patterns/design-patterns-introduction/readme/</guid>
      
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/1.jpeg&#34; alt=&#34;Cover art © 1994 M.C. Escher / Cordon Art - Baarn - Holland. All right reserved.&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Cover art © 1994 M.C. Escher / Cordon Art - Baarn - Holland. All right reserved.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Before I start talking about what are the design patterns I would like to dedicate a few words to this picture that you can see in the official cover of &lt;strong&gt;Design Pattern - Elements of Reusable Object-Oriented Software.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you did not know who &lt;strong&gt;Maurits Cornelis Escher&lt;/strong&gt; was, he was an one of the greatest artist of the twentieth century who made mathematically inspired woodcuts, lithographs, and mezzotints.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;His work features mathematical objects and operations including impossible objects, explorations of infinity, reflection, symmetry, perspective, truncated and stellated polyhedra, hyperbolic geometry, and tessellations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Joking, the description above is extremely consistent with the thought you have when you are a beginner to design patterns.  I could talk for hours about what I think about this masterpiece but it is better to move on to the concrete, or rather to the abstract …&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What Is a Design Pattern?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Describing Design Patterns&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Catalog of Design Patterns&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Organizing the Catalog&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How Design Patterns Solve Design Problems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-a-designpattern&#34;&gt;What is a Design Pattern?&lt;/h2&gt;
&lt;p&gt;Christofer Alexander says,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such way that you can use this solution a million times over, without ever doing it the same way twice&amp;rdquo; [AIS+77, page x]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Probably the best way to classify design patterns is to talk about their four main elements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;Pattern name&lt;/strong&gt; is simply the name that describe the pattern. Usually it is one or two word in relationship with their &lt;strong&gt;Solution&lt;/strong&gt; and &lt;strong&gt;Consequences&lt;/strong&gt;. Attributing a &lt;strong&gt;Pattern name&lt;/strong&gt; we can use this to talk with our colleagues, write a documentation and many other thing without  ambiguity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;Problem&lt;/strong&gt; describes when we apply the pattern. It might be a representation such as how to implements an algorithm or data structure as an Object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;Solution&lt;/strong&gt; describes the elements that we should use to implements the design pattern. These elements could be related to themselves and the collaboration and responsibilities are more important.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;Consequences&lt;/strong&gt; are the result and trade-off that the design patter should returns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;describing-designpattern&#34;&gt;Describing Design Pattern&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Design Pattern - Elements of Reusable Object-Oriented Software&lt;/strong&gt; book describe design patterns using a consistent format. Each pattern is divided into section according to the following template.&lt;/p&gt;
&lt;h3 id=&#34;pattern-name-and-classification&#34;&gt;Pattern Name and Classification&lt;/h3&gt;
&lt;p&gt;A good name is vital, because it will become part of your design vocabulary. The pattern&amp;rsquo;s classification reflects the scheme I introduce in section &lt;strong&gt;Organizing the Catalog.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;intent&#34;&gt;Intent&lt;/h3&gt;
&lt;p&gt;Following question: What does the design pattern do? What is its rationale and intent? What particular design issue or problem does is address?&lt;/p&gt;
&lt;h3 id=&#34;also-knownas&#34;&gt;Also Known As&lt;/h3&gt;
&lt;p&gt;Other well-known names for the pattern, if any.&lt;/p&gt;
&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;
&lt;p&gt;A scenario that illustrate a design problem and how the class and object structures in the pattern solve the problem.&lt;/p&gt;
&lt;h3 id=&#34;applicability&#34;&gt;Applicability&lt;/h3&gt;
&lt;p&gt;What are the situations in which the design pattern can be applied? What are example of poor designs that the pattern can address? How can you recognize these situations?&lt;/p&gt;
&lt;h3 id=&#34;structure&#34;&gt;Structure&lt;/h3&gt;
&lt;p&gt;A graphical representation of the classes in the pattern using a notation based on the Object Modeling Technique (OMT) [RBP+91]. I also use interaction diagrams [JCJO92, Boo94] to illustrate sequences of request and collaborations between object. &lt;/p&gt;
&lt;h3 id=&#34;participants&#34;&gt;Participants&lt;/h3&gt;
&lt;p&gt;The classes and / or objects participating in the design pattern and their responsibilities.&lt;/p&gt;
&lt;h3 id=&#34;collaborations&#34;&gt;Collaborations&lt;/h3&gt;
&lt;p&gt;How the participants collaborate to carry out their responsibilities.&lt;/p&gt;
&lt;h3 id=&#34;consequences&#34;&gt;Consequences&lt;/h3&gt;
&lt;p&gt;How does the pattern support its objectives? Whar are trade-offs and results of using pattern?&lt;/p&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;What pitfalls, hints, or techniques should you be aware of when implementing the pattern?&lt;/p&gt;
&lt;h3 id=&#34;sample-code&#34;&gt;Sample Code&lt;/h3&gt;
&lt;p&gt;Code fragments that illustrate how you might implement the pattern in C++ or Smalltalk.&lt;/p&gt;
&lt;h3 id=&#34;known-uses&#34;&gt;Known Uses&lt;/h3&gt;
&lt;p&gt;Example of the pattern found in real system.&lt;/p&gt;
&lt;h3 id=&#34;related-patterns&#34;&gt;Related Patterns&lt;/h3&gt;
&lt;p&gt;When design pattern are closely related to this one?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;the-catalog-of-design-patterns&#34;&gt;The Catalog of Design Patterns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Abstract Factory&lt;/strong&gt; - Provide an interface for creating families of related or dependent objects without specifying their concrete classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adapter&lt;/strong&gt; - Convert the interface of a class into another interface clients expect. Adapter lets classes work together that could not otherwise because of incompatible interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt; - Decouple an abstraction from its implementation so that the two can very independently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt; - Separate the construction of a complex object from its representation so that the same construction process can create different representations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chain of Responsibility&lt;/strong&gt; - Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving object and pass the request along the chain until an object handles it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Command&lt;/strong&gt; - Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undo able operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Composite&lt;/strong&gt; - Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decorator&lt;/strong&gt; - Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Facade&lt;/strong&gt; - Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Factory Method&lt;/strong&gt; - Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flyweight&lt;/strong&gt; - Use sharing to support large numbers of fine-grained objects efficiently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interpreter&lt;/strong&gt; - Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Iterator&lt;/strong&gt; - Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mediator&lt;/strong&gt; - Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memento&lt;/strong&gt; - Without violating encapsulation, capture and externalize an object&amp;rsquo;s internal state so that the object can be restored to this state later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Observer&lt;/strong&gt; - Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prototype&lt;/strong&gt; - Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proxy&lt;/strong&gt; - Provide a surrogate or placeholder for another object to control access to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt; - Ensure a class only has one instance, and provide a global point of access to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;State&lt;/strong&gt; - Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strategy&lt;/strong&gt; - Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Template Method&lt;/strong&gt; - Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm&amp;rsquo;s structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Visitor&lt;/strong&gt; - Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;organizing-thecatalog&#34;&gt;Organizing the Catalog&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/2.png&#34; alt=&#34;Table 1.1: Design pattern space&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Table 1.1: Design pattern space&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Design pattern vary in their granularity and level of abstraction. The classification helps you to learn the patterns in the catalog faster.&lt;/p&gt;
&lt;p&gt;The book classify design pattern by two criteria (Table 1.1). The first criterion, called &lt;strong&gt;purpose&lt;/strong&gt; reflects what a pattern does. Patterns can have either &lt;strong&gt;creational&lt;/strong&gt;, &lt;strong&gt;structural&lt;/strong&gt;, or &lt;strong&gt;behavioral&lt;/strong&gt; purpose. Creational patterns concern the process of object creation. Structural patterns deal with the composition of classes or object. Behavioral patterns characterize the ways in which classes or objects interact and distribute responsibility.&lt;/p&gt;
&lt;p&gt;The second criterion, called &lt;strong&gt;scope&lt;/strong&gt;, specifies whether the pattern applies primarily to classes or to objects. Class patterns deal with relationship between classes and their subclasses. Object patterns deal with object relationship, which can be changed at run-time and are more dynamic.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;how-design-patterns-solve-designproblems&#34;&gt;How Design Patterns Solve Design Problems&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/3.png&#34; alt=&#34;Figure 1.1: Design pattern relationship&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1.1: Design pattern relationship&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;finding-appropriate-objects&#34;&gt;Finding Appropriate Objects&lt;/h3&gt;
&lt;p&gt;Object-oriented programming are made up of objects. An &lt;strong&gt;object&lt;/strong&gt; packages both data and the procedures that operate on that data. The procedures are typically called &lt;strong&gt;methods&lt;/strong&gt; or &lt;strong&gt;operations&lt;/strong&gt;. An object performs an operation when it receives a &lt;strong&gt;request&lt;/strong&gt; from a &lt;strong&gt;client&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The hard part of object-oriented design is decomposing a system into objects because there are many factor come into play: encapsulation, granularity, dependency, flexibility, performance, evolution, reusability, and on and on. &lt;/p&gt;
&lt;p&gt;Object oriented design methodologies favor many different approaches. You can write a problem statement and create classes and operations. Or you can focus on the collaboration in your system. Or you can model the real world and translate objects found during analysis into design.&lt;/p&gt;
&lt;p&gt;Design patters help you identify less-obvious abstractions and the objects that can capture them. For example, objects that represent a process or algorithm don&amp;rsquo;t occur in nature. The &lt;strong&gt;strategy&lt;/strong&gt; pattern describes how to implement interchangeable families of algorithms. The state pattern represent each &lt;strong&gt;state&lt;/strong&gt; of an entity as an object.&lt;/p&gt;
&lt;h3 id=&#34;determining-object-granularity&#34;&gt;Determining Object Granularity&lt;/h3&gt;
&lt;p&gt;Object can vary in size and number. They can represent everything down to the hardware or all the way up to entire software. &lt;/p&gt;
&lt;p&gt;Design patterns address this issue as well. The &lt;strong&gt;facade&lt;/strong&gt; pattern describes how to represent complete subsystem as object and the &lt;strong&gt;flyweight&lt;/strong&gt; pattern describe how to support huge numbers of object at the finest granularity&lt;/p&gt;
&lt;h3 id=&#34;specifying-object-interfaces&#34;&gt;Specifying Object Interfaces&lt;/h3&gt;
&lt;p&gt;Every operation declared by an object specifies the operation&amp;rsquo;s name, the objects it takes as parameters, and the operation&amp;rsquo;s return value. This is known as the operation&amp;rsquo;s &lt;strong&gt;signature&lt;/strong&gt;. The set of all signatures defined by an object&amp;rsquo;s operations is called the &lt;strong&gt;interface&lt;/strong&gt; to the object.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;type&lt;/strong&gt; is a name used to denote a particular interface. We speak of an object as having the type &amp;ldquo;Window&amp;rdquo; if it accepts all requests for the operations defined in the interface named &amp;ldquo;Window.&amp;rdquo; Two objects of the same type need only share parts of their interfaces. Interfaces can contain other interfaces as subsets. We say that a type is a &lt;strong&gt;subtype&lt;/strong&gt; of another if its interface contains the interface of its &lt;strong&gt;supertype.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When a request is sent to an object, the particular operation that&amp;rsquo;s performed depends on both the request and the receiving object. The run-time association of a request to an object and one of its operations is known as &lt;strong&gt;dynamic binding.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Moreover, dynamic binding lets you substitute objects that have identical interfaces for each other at run-time. This substitutability is known as &lt;strong&gt;polymorphism&lt;/strong&gt;, and it&amp;rsquo;s a key concept in object-oriented systems.&lt;/p&gt;
&lt;p&gt;Design patterns help you define interfaces by identifying their key elements and the kinds of data that get sent across an interface. &lt;/p&gt;
&lt;p&gt;For example, the Memento pattern it describes how to encapsulate and save the internal state of an object so that the object can be restored to that state later.&lt;/p&gt;
&lt;h3 id=&#34;specifying-object-implementations&#34;&gt;Specifying Object Implementations&lt;/h3&gt;
&lt;p&gt;An object&amp;rsquo;s implementation is defined by its &lt;strong&gt;class.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Objects are created by &lt;strong&gt;instantiating&lt;/strong&gt; a class. The object is said to be an &lt;strong&gt;instance&lt;/strong&gt; of the class. The process of instantiating a class allocates storage for the object&amp;rsquo;s internal data (made up of &lt;strong&gt;instance variables&lt;/strong&gt;) and associates the operations with these data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;New classes can be defined in terms of existing classes using &lt;strong&gt;class inheritance&lt;/strong&gt;. When a &lt;strong&gt;subclass&lt;/strong&gt; inherits from a &lt;strong&gt;parent class&lt;/strong&gt;, it includes the definitions of all the data and operations that the parent class defines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;abstract class&lt;/strong&gt; is one whose main purpose is to define a common interface for its subclasses. An abstract class will defer some or all of its implementation to operations defined in subclasses; hence an abstract class cannot be instantiated. A &lt;strong&gt;concrete class&lt;/strong&gt; may &lt;strong&gt;override&lt;/strong&gt; an operation defined by its parent class. Overriding gives subclasses a chance to handle requests instead of their parent classes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;mixin class&lt;/strong&gt; is a class that&amp;rsquo;s intended to provide an optional interface or functionality to other classes. It&amp;rsquo;s similar to an abstract class in that it&amp;rsquo;s not intended to be instantiated. Mixin classes require multiple inheritance:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;class-versus-interface-inheritance&#34;&gt;Class versus Interface Inheritance&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s important to understand the difference between an object&amp;rsquo;s class and its type.&lt;/p&gt;
&lt;p&gt;An object&amp;rsquo;s class defines how the object is implemented. The class defines the object&amp;rsquo;s internal state and the implementation of its operations. In contrast, an object&amp;rsquo;s type only refers to its interface – the set of requests to which it can respond. An object can have many types, and objects of different classes can have the same type.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also important to understand the difference between class inheritance and interface inheritance (or subtyping). Class inheritance defines an object&amp;rsquo;s implementation in terms of another object&amp;rsquo;s implementation. In short, it&amp;rsquo;s a mechanism for code and representation sharing. In contrast, interface inheritance (or subtyping) describes when an object can be used in place of another.&lt;/p&gt;
&lt;p&gt;Many of the design patterns depend on this distinction. For example, in the Composite pattern, Component defines a common interface, but Composite often defines a common implementation. Observer, State, and Strategy are often implemented with abstract classes.&lt;/p&gt;
&lt;h3 id=&#34;putting-reuse-mechanisms-towork&#34;&gt;Putting Reuse Mechanisms to Work&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Inheritance versus Composition&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The two most common techniques for reusing functionality in object-oriented systems are class inheritance and &lt;strong&gt;object composition&lt;/strong&gt;. As I&amp;rsquo;ve explained, class inheritance lets you define the implementation of one class in terms of another&amp;rsquo;s. Reuse by subclassing is often referred to as &lt;strong&gt;white-box reuse.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Object composition is an alternative to class inheritance. Here, new functionality is obtained by assembling or composing objects to get more complex functionality. Object composition requires that the objects being composed have well-defined interfaces. This style of reuse is called &lt;strong&gt;black-box reuse&lt;/strong&gt;, because no internal details of objects are visible. &lt;/p&gt;
&lt;p&gt;Inheritance and composition each have their advantages and disadvantages. Class inheritance is defined statically at compile-time. It also make it easier to modify the implementation being reused. But you can&amp;rsquo;t change the implementations inherit from parent classes at run-time, because inheritance is defined at compile-time. The implementation of a subclass becomes so bound up with the implementation of its parent class that any change in the parent&amp;rsquo;s implementation will force the subclass to change.&lt;/p&gt;
&lt;p&gt;Object composition is defined dynamically at run-time through objects acquiring references to other objects. Composition requires objects to respect each others&#39; interfaces. Objects are accessed solely through their interfaces, we don&amp;rsquo;t break encapsulation. Any object can be replaced at run-time by another as long as it has the same type. &lt;/p&gt;
&lt;p&gt;Favoring object composition over class inheritance helps you keep each class encapsulated and focused on one task. Your classes and class hierarchies will remain small. On the other hand, a design based on object composition will have more objects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Delegation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Delegation&lt;/strong&gt; is a way of making composition as powerful for reuse as inheritance [Lie86, JZ91]. In delegation, &lt;em&gt;two&lt;/em&gt; objects are involved in handling a request: a receiving object delegates operations to its &lt;strong&gt;delegate.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Differs from inheritance because it is no longer accessed via this or &lt;em&gt;self&lt;/em&gt;. For example, instead of making class Window a subclass of Rectangle, the Window class might reuse the behavior of Rectangle by keeping a Rectangle instance variable and &lt;em&gt;delegating&lt;/em&gt; Rectangle-specific behavior to it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;The main advantage of delegation is that it make it easy to compose behaviors at run-time and to change the way they are composed. If we want, our window can become a circular at run-time, assuming Rectangle and Circle have the same type.&lt;/p&gt;
&lt;p&gt;Delegation has a disadvantage it shares with other techniques that make software more flexible through object composition: Dynamic, highly parameterized software is harder to understand than more static software.&lt;/p&gt;
&lt;p&gt;Several design pattern use delegation. The State, Strategy, and Visitor patterns depend on it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Inheritance versus Parameterized Types&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another (not strictly object-oriented) technique for reusing functionality is through &lt;strong&gt;parameterized types&lt;/strong&gt;, also known as &lt;strong&gt;generics&lt;/strong&gt; and &lt;strong&gt;templates&lt;/strong&gt;. This technique lets you define a type without specifying all the other types it uses.&lt;/p&gt;
&lt;p&gt;Parameterized types give us a third way (in addition to class inheritance and object composition) to compose behavior in object-oriented systems. Many designs can be implemented using any of these three techniques.&lt;/p&gt;
&lt;p&gt;There are important differences between these techniques. Object composition lets you change the behavior being composed atrun-time, but it also requires indirection and can be less efficient. Inheritance lets you provide default implementations for operations and lets subclasses override them. Parameterized typeslet you change the types that a class can use. But neither inheritance nor parameterized types can change at run-time.&lt;/p&gt;
&lt;h3 id=&#34;relating-run-time-and-compile-time-structures&#34;&gt;Relating Run-Time and Compile-Time Structures&lt;/h3&gt;
&lt;p&gt;Consider the distinction between object &lt;strong&gt;aggregation&lt;/strong&gt; and &lt;strong&gt;acquaintance&lt;/strong&gt; and how differently they manifest themselves at compile- and run-times. Aggregation implies that one object owns or is responsible for another object. Generally we speak of an object having or being part of another object.&lt;/p&gt;
&lt;p&gt;Acquaintance implies that an object merely knows of another object. Sometimes acquaintance is called &amp;ldquo;association&amp;rdquo; or the &amp;ldquo;using&amp;rdquo; relationship. Acquainted objects may request operations of each other, but they aren&amp;rsquo;t responsible for each other.&lt;/p&gt;
&lt;p&gt;In this diagrams, a plain arrowhead line denotes acquaintance. An arrowhead line with a diamond at its base denotes aggregation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://federicobruzzone.github.io/design-pattern/Design%20Patterns%20%E2%80%8A-%E2%80%8A%20Introduction/img/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;designing-for-change&#34;&gt;Designing for Change&lt;/h3&gt;
&lt;p&gt;The key to maximizing reuse lies in anticipating new requirements and changes to existing requirements, and in designing your systems so that they can evolve accordingly.&lt;/p&gt;
&lt;p&gt;Design patterns help you avoid this by ensuring that a system can change in specific ways. &lt;/p&gt;
&lt;p&gt;There are some common causes of redesign along with the design pattern(s) that address them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Creating an object by specifying a class explicitly.&lt;/em&gt; Specifying a class name when you create an object commits you a particular implementation instead of a particular interface. Design pattern: Abstract Factory, Factory Method, Prototype.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Dependence on specific operations.&lt;/em&gt; When you specify a particular operation, you commit to one way of satisfying a request. By avoiding hard-coded request, you make it easier to change the way a request gets satisfied both at compiled-time and run-time. Design pattern: Chain of Responsibility, Command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Algorithmic dependencies.&lt;/em&gt; Algorithms are often extended, optimized, and replaced during development and reuse. Object that depend on an algorithm will have to change when the algorithm changes. Therefore algorithms that are likely to change should be isolated. Design patterns: Builder, Iterator, Strategy, Template Method, Visitor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Tight coupling&lt;/em&gt; Tight coupling leads to monolithic systems, where you can&amp;rsquo;t change or remove a class without understanding and changing many other classes. The system becomes a dense mass that&amp;rsquo;s hard to learn, port, and maintain. Design patterns use techniques such as abstract coupling and layering to promote loosely coupled systems. Design patterns: Abstract Factory, Bridge, Chain of Responsibility, Command, Facade, Mediator, Observer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Extending functionality by subclassing&lt;/em&gt; Customizing an object by subclassing often isn&amp;rsquo;t easy. Every new class has a fixed implementation overhead. Defining a subclass also requires an in-depth understanding of the parent class. Object composition in general and delegation in particular provide flexible alternatives to inheritance for combining behavior. New functionality can be added to an application by composing existing objects in new ways rather than by defining new subclasses of existing classes. Design patterns: Bridge, Chain of Responsibility, Composite, Decorator, Observer, Strategy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>
